#!/usr/bin/env python3

import json
import sys
import os
import argparse
import tempfile
from pathlib import Path

def load_locus_profiles(profiles_path=None):
    """Load locus profiles from JSON file"""
    if profiles_path is None:
        # Try multiple possible paths
        possible_paths = [
            "scripts/catalogs/loci_profiles.json",
            "/opt/stripy-pipeline/scripts/catalogs/loci_profiles.json",
            "catalogs/loci_profiles.json"
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                profiles_path = path
                break
        else:
            profiles_path = "scripts/catalogs/loci_profiles.json"
    
    try:
        with open(profiles_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"Warning: Could not find {profiles_path}", file=sys.stderr)
        return {}
    except json.JSONDecodeError:
        print(f"Warning: Invalid JSON in {profiles_path}", file=sys.stderr)
        return {}

def expand_locus(locus_arg, profiles):
    """Expand locus argument by replacing profile names with actual loci"""
    if not locus_arg:
        return []
    
    locus_list = [locus.strip() for locus in locus_arg.split(',')]
    expanded_locus = []
    
    for locus in locus_list:
        if locus in profiles:
            expanded_locus.extend(profiles[locus])
        else:
            expanded_locus.append(locus)
    
    return list(set(expanded_locus))

def create_config_file(base_config_path=None, output_json=None, output_tsv=None, 
                      output_html=None, verbose=None, num_threads=None):
    """Create a config file by merging base config with overrides"""
    config = {}
    
    # Load base config if provided
    if base_config_path and os.path.exists(base_config_path):
        try:
            with open(base_config_path, 'r') as f:
                config = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            print(f"Warning: Could not load base config {base_config_path}: {e}", file=sys.stderr)
    
    # Apply overrides
    if output_json is not None:
        config["output_json"] = output_json
    if output_tsv is not None:
        config["output_tsv"] = output_tsv
    if output_html is not None:
        config["output_html"] = output_html
    if verbose is not None:
        config["verbose"] = verbose
    if num_threads is not None:
        config["num_threads"] = num_threads
    
    # Create temporary config file
    config_file = tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False)
    json.dump(config, config_file, indent=2)
    config_file.close()
    
    return config_file.name

def main():
    if len(sys.argv) < 2:
        print("Usage: stripy [STRipy arguments...]", file=sys.stderr)
        sys.exit(1)
    
    args = sys.argv[1:]
    new_args = []
    locus_expanded = False
    
    # Config options we handle
    config_options = {
        'base_config': None,
        'output_json': None,
        'output_tsv': None,
        'output_html': None,
        'verbose': None,
        'num_threads': None
    }
    
    # Parse arguments manually to avoid conflicts with STRipy
    i = 0
    while i < len(args):
        arg = args[i]
        
        # Handle our config options
        if arg == "--base-config" and i + 1 < len(args):
            config_options['base_config'] = args[i + 1]
            i += 2
        elif arg == "--output-json" and i + 1 < len(args):
            config_options['output_json'] = args[i + 1].lower() == 'true'
            i += 2
        elif arg == "--output-tsv" and i + 1 < len(args):
            config_options['output_tsv'] = args[i + 1].lower() == 'true'
            i += 2
        elif arg == "--output-html" and i + 1 < len(args):
            config_options['output_html'] = args[i + 1].lower() == 'true'
            i += 2
        elif arg == "--verbose" and i + 1 < len(args):
            config_options['verbose'] = args[i + 1].lower() == 'true'
            i += 2
        elif arg == "--num-threads" and i + 1 < len(args):
            try:
                config_options['num_threads'] = int(args[i + 1])
            except ValueError:
                print(f"Warning: Invalid num-threads value: {args[i + 1]}", file=sys.stderr)
            i += 2
        elif arg == "--locus" and i + 1 < len(args):
            # Found --locus, expand it
            profiles = load_locus_profiles()
            locus_arg = args[i + 1]
            expanded_locus = expand_locus(locus_arg, profiles)
            new_args.extend(["--locus", ",".join(expanded_locus)])
            locus_expanded = True
            i += 2
        else:
            new_args.append(arg)
            i += 1
    
    # Create config file if any config options are provided
    config_file = None
    if any([config_options['output_json'] is not None, config_options['output_tsv'] is not None, 
            config_options['output_html'] is not None, config_options['verbose'] is not None, 
            config_options['num_threads'] is not None]):
        config_file = create_config_file(
            base_config_path=config_options['base_config'],
            output_json=config_options['output_json'],
            output_tsv=config_options['output_tsv'],
            output_html=config_options['output_html'],
            verbose=config_options['verbose'],
            num_threads=config_options['num_threads']
        )
        
        # Add config file to STRipy args
        new_args.extend(["--config", config_file])
    
    if locus_expanded:
        print(f"Expanded locus: {new_args[new_args.index('--locus') + 1]}", file=sys.stderr)
    
    # Execute the actual STRipy command
    os.execvp("python3", ["python3", "/opt/stripy-pipeline/stri.py"] + new_args)

if __name__ == "__main__":
    main()
